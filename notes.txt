Order is in Outermost to Innermost Layer - 4 Layer Clean Architecture

1. Infrastructure Layer #Outermost layer
2. Presentation Layer / Adapter / Controller
3. Application Layer / Use Case
4. Domain Layer / Enterprise / Entities  #Innermost layer

Clean Architecture - Beginners Guide : https://betterprogramming.pub/the-clean-architecture-beginners-guide-e4b7058c1165

Nothing in an inner circle or layer can know anything at all about something in an outer circle. i.e. the inner circle shouldnâ€™t depend on anything in the outer circle.


SOLID Principles
S: Single Responsibility Principle
O: Open / Closed Principle 
L: Liskov Substitution Principle
I: Interface Segregation Principle
D: Dependency Inversion Principle

S - Single Responsibility Principle: A class should have only one responsibility or job. This helps to keep classes focused and easy to understand.

O - Open/Closed Principle: Software entities (classes, modules, functions, etc.) should be open for extension but closed for modification. This means that you should be able to add new functionality to a class without having to modify the existing code.

L - Liskov Substitution Principle: Subtypes should be able to replace their supertypes without changing the program. This principle ensures that inheritance objects are well-designed and don't introduce unexpected behavior.

I - Interface Segregation Principle: Clients should not be forced to depend on interfaces they do not use. This principle encourages you to split larger interfaces into smaller, more specific interfaces.

D - Dependency Inversion Principle: High-level modules should depend on abstractions. Abstractions should not depend on details; details should depend on abstractions. This principle helps to decouple modules and make them more reusable.

SOLID in OOPs (Java) : https://dev.to/iamrule/solid-principles-explained-28da
SOLID in JavaScript : https://www.calibraint.com/blog/solid-principles-in-javascript